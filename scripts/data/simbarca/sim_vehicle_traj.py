""" This script generates and runs the command to simulate the vehicle trajectories in Aimsun.
    Before using this script, you need to generate the simulation settings using gen_exp_settings.py, 
    and add the Aimsun_API.py in the API tab of Aimsun's scenario settings.
    
    This script is supposed to be executed from under the root folder of the project, i.e.,
        python scripts/data/simbarca/sim_vehicle_traj.py
"""
import os
import glob
import shutil
import subprocess
import multiprocessing as mp 

from argparse import ArgumentParser

def sim_one_folder(folder, run_sim=True, extract_stats=True, agg_stats=True, cleanup=True):
    ######################################################
    # 1. Run simulation in Aimsun
    ######################################################
    if run_sim:
        project_copy_path = "{}/{}".format(folder, "project_copy.ang")
        # copy the original file to a new one, because Aimsun will lock the file upon execution
        shutil.copyfile(project, project_copy_path)
        command = "cd {} && {} --project {} --command execute --target {} --force_number_of_threads 16 --log_file {}/aimsun_log.log".format(
            folder, executable, project_copy_path, rep_id, folder)
        print("Process {} is executing command \n {}".format(os.getpid(), command))
        subprocess.run(command, shell=True)
    
    ######################################################
    # 2. Extract traffic statistics per time step 
    ######################################################
    if extract_stats:
        stats_cmd = "python scripts/data/simbarca/time_series_from_traj.py --metadata_folder datasets/simbarca/metadata --session_folder {}".format(folder)
        print("Executing command: \n {}".format(stats_cmd))
        subprocess.run(stats_cmd, shell=True)
    
    ######################################################
    # 3. Aggregate raw statistics into different intervals
    ######################################################
    if agg_stats:
        sample_cmd = "python scripts/data/simbarca/extract_samples.py --session {}".format(folder)
        print("Executing command: \n {}".format(sample_cmd))
        subprocess.run(sample_cmd, shell=True)
    
    ######################################################
    # 4. delete the raw simulation files, keep processed
    ######################################################
    if cleanup: # set cleanup to False if you want to keep the raw trajectory files
        clear_cmd = "rm {}/trajectory/*.json".format(folder)
        print("Executing command: \n {}".format(clear_cmd))
        subprocess.run(clear_cmd, shell=True)
    


if __name__ == '__main__':
    
    parser = ArgumentParser()
    parser.add_argument("--cleanup", action='store_true', help="Delete the raw trajectory files after processing")
    parser.add_argument("--run_sim", action='store_true', help="Run the simulation in Aimsun")
    parser.add_argument("--extract_stats", action='store_true', help="Extract traffic statistics from the raw trajectory files")
    parser.add_argument("--agg_stats", action='store_true', help="Aggregate the raw statistics into different intervals")
    args = parser.parse_args()


    # path to the aimsun console executable
    executable = "/opt/Aimsun_Next_22/aconsole"
    # the network model, should add `Aimsun_API.py` in the API tab of the scenario settings
    project = "/home/weijiang/Downloads/Eixample_BASE_v7.ang"
    # the replication id to execute
    rep_id = "10607425"
    # the folders generated by gen_exp_settings.py
    folder_pattern = "datasets/simbarca/simulation_sessions/session_*"
    all_folders = [os.path.abspath(x) for x in sorted(glob.glob(folder_pattern))]

    def helper_function(folder):
        sim_one_folder(folder, run_sim=args.run_sim, extract_stats=args.extract_stats, 
                       agg_stats=args.agg_stats, cleanup=args.cleanup)
    
    with mp.Pool(processes=8) as pool:
        pool.map(helper_function, all_folders)
        
    print("All simulations are done!")
